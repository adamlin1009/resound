// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id             String        @id @default(auto()) @map("_id") @db.ObjectId
  name           String?
  email          String?       @unique
  emailVerified  DateTime?
  image          String?
  hashedPassword String?
  isAdmin        Boolean       @default(false)
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  favoriteIds    String[]      @db.ObjectId
  
  // Profile fields
  experienceLevel      Int?          @default(1)
  preferredInstruments String[]      @default([])
  bio                  String?
  
  accounts       Account[]
  listings       Listing[]
  reservations   Reservation[]
  payments       Payment[]
  ownerConversations  Conversation[] @relation("OwnerConversations")
  renterConversations Conversation[] @relation("RenterConversations")
  sentMessages   Message[]
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Listing {
  id               String        @id @default(auto()) @map("_id") @db.ObjectId
  title            String
  description      String
  imageSrc         String
  createdAt        DateTime      @default(now())
  category         String
  experienceLevel  Int
  city             String?
  state            String
  zipCode          String?
  exactAddress     String
  latitude         Float?
  longitude        Float?
  userId           String        @db.ObjectId
  price            Int
  
  // Availability Settings
  pickupStartTime  String?       // e.g., "09:00"
  pickupEndTime    String?       // e.g., "17:00"
  returnStartTime  String?       // e.g., "09:00"
  returnEndTime    String?       // e.g., "17:00"
  availableDays    String[]      @default([]) // e.g., ["monday", "tuesday", "wednesday", "thursday", "friday", "saturday", "sunday"]
  
  user             User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  reservations     Reservation[]
  payments         Payment[]
  conversations    Conversation[]
}

model Reservation {
  id              String            @id @default(auto()) @map("_id") @db.ObjectId
  userId          String            @db.ObjectId
  listingId       String            @db.ObjectId
  startDate       DateTime
  endDate         DateTime
  totalPrice      Int
  status          ReservationStatus @default(ACTIVE)
  canceledAt      DateTime?
  canceledBy      String?           @db.ObjectId
  cancellationReason    String?
  createdAt       DateTime          @default(now())
  expiresAt       DateTime?         // For PENDING reservations
  stripeSessionId String?           // Link to payment session
  
  // Rental Management Fields
  rentalStatus    RentalStatus      @default(PENDING)
  
  // Pickup Details
  pickupAddress      String?
  pickupInstructions String?
  pickupStartTime    DateTime?
  pickupEndTime      DateTime?
  pickupConfirmedByOwner   Boolean @default(false)
  pickupConfirmedByRenter  Boolean @default(false)
  pickupConfirmedAt  DateTime?
  
  // Return Details
  returnAddress      String?
  returnInstructions String?
  returnDeadline     DateTime?
  returnStartTime    DateTime?
  returnEndTime      DateTime?
  returnConfirmedByOwner   Boolean @default(false)
  returnConfirmedByRenter  Boolean @default(false)
  returnConfirmedAt  DateTime?
  
  // Additional fields
  ownerNotes         String?
  renterNotes        String?
  
  user            User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  listing         Listing           @relation(fields: [listingId], references: [id], onDelete: Cascade)
}

model Payment {
  id                String         @id @default(auto()) @map("_id") @db.ObjectId
  stripeSessionId   String         @unique
  amount            Int            // Amount in cents
  currency          String         @default("usd")
  status            PaymentStatus  @default(PENDING)
  userId            String         @db.ObjectId
  listingId         String         @db.ObjectId
  startDate         DateTime
  endDate           DateTime
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  
  user              User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  listing           Listing        @relation(fields: [listingId], references: [id], onDelete: Cascade)
}

enum PaymentStatus {
  PENDING
  PROCESSING
  SUCCEEDED
  FAILED
  CANCELED
}

enum ReservationStatus {
  PENDING    // Hold during checkout
  ACTIVE
  COMPLETED
  CANCELED
}

enum RentalStatus {
  PENDING           // Payment made, awaiting owner setup
  READY_FOR_PICKUP  // Owner has set pickup details
  PICKED_UP         // Instrument collected
  IN_PROGRESS       // Active rental
  AWAITING_RETURN   // Near return date
  RETURNED          // Instrument returned
  COMPLETED         // Rental fully completed
}

model Conversation {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  listingId String    @db.ObjectId
  ownerId   String    @db.ObjectId
  renterId  String    @db.ObjectId
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  
  listing   Listing   @relation(fields: [listingId], references: [id], onDelete: Cascade)
  owner     User      @relation("OwnerConversations", fields: [ownerId], references: [id], onDelete: Cascade)
  renter    User      @relation("RenterConversations", fields: [renterId], references: [id], onDelete: Cascade)
  messages  Message[]
  
  @@unique([listingId, ownerId, renterId])
}

model Message {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId
  conversationId String       @db.ObjectId
  senderId       String       @db.ObjectId
  content        String
  createdAt      DateTime     @default(now())
  
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  sender         User         @relation(fields: [senderId], references: [id], onDelete: Cascade)
}

// This tells Prisma where to find the seed script
// (This is just a comment for documentation)
